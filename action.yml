name: bump-semantic
author: meysam@licenseware.io
branding:
  color: purple
  icon: arrow-up
description: Bump patch version of a semantic version
inputs:
  author-name:
    description: "Name of the author to use for the git commit"
    required: false
    default: "${{ github.actor }}"
  author-email:
    description: "Email of the author to use for the git commit"
    required: false
    default: "${{ github.actor }}@users.noreply.github.com"
  gpg-private-key:
    description: "GPG private key to use for signing the tag"
    required: false
    default: ""
  gpg-key-id:
    description: "GPG key ID to use for signing the tag"
    required: false
    default: ""
  release:
    description: "Whether or not to create a GitHub release from the tag (truthy values: true, yes, 1)"
    required: false
    default: ""
  tag:
    description: "Whether or not to commit the tag and push to the repository (truthy values: true, yes, 1)"
    required: false
    default: ""
  tag-extra-message:
    description: "Extra message to append to the tag commit message"
    required: false
    default: ""
  token:
    description: "GitHub token to use for creating the release"
    required: false
    default: ""
  version:
    description: Semantic versioning to bump
    required: false
    default: ""
outputs:
  version:
    description: Bumped semantic version
    value: ${{ steps.bump.outputs.version }}
runs:
  using: composite
  steps:
    - name: Checkout
      if: inputs.version == ''
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Fetch the latest semantic version tag
      if: inputs.version == ''
      id: semver
      env:
        SEMVER_REGEX: '^v?(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
      shell: python
      run: |
        import re
        import os
        import subprocess

        def biggest_semver():
            tags = subprocess.check_output(['git', 'tag', '--list', '--sort=-v:refname']).decode('utf-8').splitlines()
            for tag in tags:
                if re.match(os.environ['SEMVER_REGEX'], tag):
                    return tag

        with open(os.environ['GITHUB_OUTPUT'], 'a') as github_output:
          print(f'latest-tag={biggest_semver()}', file=github_output)
    - name: Bump version
      shell: bash
      id: bump
      run: |
        if [ -z "${{ inputs.version }}" ]; then
          current_version="${{ steps.semver.outputs.latest-tag }}"
        else
          current_version="${{ inputs.version }}"
        fi

        increment_version() {
            local version="$1"
            local major
            local minor
            local patch

            version="${version#v}"

            IFS='.' read -r major minor patch <<< "$version"

            [ -z "$major" ] && major=0
            [ -z "$minor" ] && minor=0
            [ -z "$patch" ] && patch=0

            ((patch++))

            echo "v${major}.${minor}.${patch}"
        }

        bumped=$(increment_version $current_version)
        echo "version=${bumped}" >> $GITHUB_OUTPUT
    - name: Configure git
      shell: bash
      run: |
        git config --global user.name "${{ inputs.author-name }}"
        git config --global user.email "${{ inputs.author-email }}"
    - name: Configure GPG Key signing
      if: inputs.gpg-private-key != '' && inputs.gpg-key-id != ''
      shell: bash
      run: |
        git config --global commit.gpgsign true
        echo "${{ inputs.gpg-private-key }}" | base64 --decode | gpg --import
        git config --global user.signingkey ${{ inputs.gpg-key-id }}
    - name: Discover sign flag
      id: sign
      shell: bash
      run: |
        if git config --get commit.gpgsign; then
          echo "flag=-s" >> $GITHUB_OUTPUT
        else
          echo "flag=-a" >> $GITHUB_OUTPUT
        fi
    - name: Create tag
      shell: bash
      run: |
        git tag ${{ steps.sign.outputs.flag }} ${{ steps.bump.outputs.version }} -m "${{ steps.bump.outputs.version }}" -m "${{ inputs.tag-extra-message }}"
    - name: Push tag
      if: contains(fromJSON('["true", "yes", "1"]'), inputs.tag)
      shell: bash
      run: |
        git push origin ${{ steps.bump.outputs.version }}
    - name: Check token is initialized for release
      if: contains(fromJSON('["true", "yes", "1"]'), inputs.release)
      shell: bash
      run: |
        if [ -z "${{ inputs.token }}" ]; then
          echo "Missing token input: Provide a GitHub token to use for creating the release"
          exit 1
        fi
    - name: Create a GitHub release from tag
      if: contains(fromJSON('["true", "yes", "1"]'), inputs.release)
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        gh release create ${{ steps.bump.outputs.version }} --title "${{ steps.bump.outputs.version }}" --generate-notes --latest
