name: bump-version
author: meysam@licenseware.io
branding:
  color: purple
  icon: arrow-up
description: Bump patch version of a semantic version
inputs:
  release:
    description: "Whether or not to create a GitHub release from the tag (truthy values: true, yes, 1)"
    required: false
    default: ""
  tag:
    description: "Whether or not to commit the tag and push to the repository (truthy values: true, yes, 1)"
    required: false
    default: ""
  token:
    description: "GitHub token to use for creating the release"
    required: false
    default: ""
  version:
    description: Semantic versioning to bump
    required: false
    default: ""
outputs:
  version:
    description: Bumped semantic version
    value: ${{ steps.bump.outputs.version }}
runs:
  using: composite
  steps:
    - name: Checkout
      if: inputs.version == ''
      uses: actions/checkout@v4
    - name: Fetch the latest semantic version tag
      if: inputs.version == ''
      id: semver
      shell: bash
      run: echo "latest-tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_OUTPUT
    - name: Bump version
      shell: bash
      id: bump
      run: |
        current_version="${{ inputs.version }}"
        bumped=$(echo $current_version | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.)
        echo "version=${bumped}" >> $GITHUB_OUTPUT
    - name: Configure git
      if: contains(fromJSON('["true", "yes", "1"]'), inputs.tag)
      shell: bash
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"
    - name: Tag and push
      if: contains(fromJSON('["true", "yes", "1"]'), inputs.tag)
      shell: bash
      run: |
        git tag -a ${{ steps.bump.outputs.version }} -m "Bump version to ${{ steps.bump.outputs.version }}"
        git push origin ${{ steps.bump.outputs.version }}
    - name: Check token is initialized for release
      if: contains(fromJSON('["true", "yes", "1"]'), inputs.release)
      shell: bash
      run: |
        if [ -z "${{ inputs.token }}" ]; then
          echo "Missing token input: Provide a GitHub token to use for creating the release"
          exit 1
        fi
    - name: Create a GitHub release from tag
      if: contains(fromJSON('["true", "yes", "1"]'), inputs.release)
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        gh release create ${{ steps.bump.outputs.version }} --title "${{ steps.bump.outputs.version }}" --generate-notes --latest
